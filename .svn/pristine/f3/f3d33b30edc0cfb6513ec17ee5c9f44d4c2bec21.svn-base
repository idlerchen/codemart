package com.fenbi.codemart.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.alibaba.fastjson.JSON;
import com.fenbi.codemart.bean.Apply;
import com.fenbi.codemart.bean.Developer;
import com.fenbi.codemart.bean.Industry;
import com.fenbi.codemart.bean.Item;
import com.fenbi.codemart.bean.ItemState;
import com.fenbi.codemart.bean.ItemType;
import com.fenbi.codemart.bean.RoleType;
import com.fenbi.codemart.bean.User;
import com.fenbi.codemart.service.ApplyService;
import com.fenbi.codemart.service.DeveloperService;
import com.fenbi.codemart.service.IndustryService;
import com.fenbi.codemart.service.ItemService;
import com.fenbi.codemart.service.RoleTypeService;
import com.fenbi.codemart.service.UserService;
import com.fenbi.codemart.service.impl.ApplyServiceImpl;
import com.fenbi.codemart.service.impl.DeveloperServiceImpl;
import com.fenbi.codemart.service.impl.IndustryServiceImpl;
import com.fenbi.codemart.service.impl.ItemServiceImpl;
import com.fenbi.codemart.service.impl.RoleTypeServiceImpl;
import com.fenbi.codemart.service.impl.UserServiceImpl;
import com.fenbi.codemart.utils.WEButils;
import com.google.gson.Gson;

public class ItemServlet extends BaseServlet {

	private static final long serialVersionUID = 1L;

	/**
	 * 生成新发布的项目，存入数据库
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void saveItem(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 获取请求参数，封装item项目对象
		Item item = WEButils.param2Bean(request, new Item());

		// 获取当前账户信息
		// 设置用户id、状态、应用到项目对象中
		User loginUser = (User) request.getSession().getAttribute("loginUser");
		item.setUserid(loginUser.getId());
		item.setState(1);
		item.setApplicantNum(0);

		// 保存项目对象，写入数据库
		ItemService is = new ItemServiceImpl();
		boolean flag = is.createItem(item);

		// 发布成功时，转发到“我发布的项目”
		if (flag) {
			request.getRequestDispatcher("ItemServlet?way=getMyItems").forward(request, response);
		}
	}

	/**
	 * 获取行业列表信息
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getIndustrys(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 解决json响应乱码
		response.setContentType("application/json;charset=utf-8");

		IndustryService is = new IndustryServiceImpl();
		List<Industry> industrys = is.getIndustrys();

		// 设置map属性集
		HashMap<String, Object> map = new HashMap<>();
		if (industrys != null) {
			map.put("code", 1);
			map.put("industrys", industrys);
		} else {
			map.put("code", 0);
		}

		// 将map属性集，转换成json字符串并发送给ajax
		String jsonStr = JSON.toJSONString(map);
		response.getWriter().print(jsonStr);
	}

	/**
	 * 获取我发布的项目
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getMyItems(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User loginUser = (User) request.getSession().getAttribute("loginUser");

		ItemService is = new ItemServiceImpl();
		List<Item> myItems = is.getItemByUserId(loginUser.getId());

		// myItems若为空，el表达式不会输出任何值
		request.setAttribute("myItems", myItems);
		request.getRequestDispatcher("/page/myitem/myIssueProjects.jsp").forward(request, response);
	}

	/**
	 * 更新项目状态
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void updateState(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 获取当前选中的itemId、要设置的项目state /＋ 如果是取消项目，开发者申请状态也要变成取消
		String itemId = request.getParameter("itemId");
		String state = request.getParameter("state");

		ItemService is = new ItemServiceImpl();
		is.updateStateByItemId(Integer.valueOf(state), Integer.valueOf(itemId));
		if(state.equals("4")) {
			ApplyService as = new ApplyServiceImpl();
			as.updateStateByItemId(5, Integer.valueOf(itemId));
		}

		// 转发，重新获取我的项目
		request.getRequestDispatcher("ItemServlet?way=getMyItems").forward(request, response);
	}

	/**
	 * 获取所有项目(招募中/开发中/已结束)
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getAllItems(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		ItemService is = new ItemServiceImpl();
		RoleTypeService rts = new RoleTypeServiceImpl();

		List<ItemType> itemType = is.getItemTypes();
		List<ItemState> itemState = is.getItemStates();
		List<RoleType> roleType = rts.getRoleTypes();
		List<Item> itemList = is.getItems();

		request.setAttribute("itemType", itemType);
		request.setAttribute("itemState", itemState);
		request.setAttribute("roleType", roleType);
		request.setAttribute("itemList", itemList);

		request.getRequestDispatcher("/page/item/projects.jsp").forward(request, response);
	}

	/**
	 * 根据项目id获取项目信息
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getItem(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String itemId = request.getParameter("itemId");

		ItemService is = new ItemServiceImpl();
		Item item = is.selectItemByItemId(Integer.valueOf(itemId));
		
		System.out.println(item);
		
		request.setAttribute("item", item);
		request.getRequestDispatcher("/page/myitem/demandUpdate.jsp").forward(request, response);
	}

	/**
	 * 更新项目信息
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void updateItem(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		Item item = WEButils.param2Bean(request, new Item());

		ItemService is = new ItemServiceImpl();
		boolean flag = is.updateItemInfo(item);

		if (flag) {
			request.getRequestDispatcher("ItemServlet?way=getMyItems").forward(request, response);
		} else {
			request.getRequestDispatcher("ItemServlet?way=getItem&itemId=" + item.getId()).forward(request, response);
		}

	}
	
	/**
	 * 
	 * 获取所有项目状态列表，列表信息发送到myIssueProject
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getItemStatusList(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 解决json响应乱码
		response.setContentType("application/json;charset=utf-8");
		
		ItemService is = new ItemServiceImpl();
		List<ItemState> itemStateList = is.getItemStateList();
		
		// 设置map属性集
		HashMap<String, Object> map = new HashMap<>();
		if (itemStateList != null) {
			map.put("code", 1);
			map.put("itemStateList", itemStateList);
		} else {
			map.put("code", 0);
		}
		// 将map属性集，转换成gson字符串并发送给ajax
		Gson gson = new Gson();
		String jsonStr = gson.toJson(map);
		
		response.getWriter().print(jsonStr);
	}
	
	/**
	 * 根据项目id获取项目详细信息转向projectDetail.jsp
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getItemDetail(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String itemId = request.getParameter("itemId");
		System.out.println(itemId);
		ItemService is = new ItemServiceImpl();
		Item item = is.selectItemByItemId(Integer.valueOf(itemId));
		
		System.out.println(item);
		
		request.setAttribute("item", item);
		request.getRequestDispatcher("/page/item/projectDetail.jsp").forward(request, response);
	}
	
	
	/**
	 * 项目列表中，根据选择的项目类型获取该项目列表
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getItemListBytype(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String itemtype = request.getParameter("itemtype");
		System.out.println(itemtype);
		ItemService is = new ItemServiceImpl();
		List<Item> itemList = is.getItemByItemtype(Integer.valueOf(itemtype));
		RoleTypeService rts = new RoleTypeServiceImpl();
		
		List<ItemType> itemType = is.getItemTypes();
		List<ItemState> itemState = is.getItemStates();
		List<RoleType> roleType = rts.getRoleTypes();

		request.setAttribute("itemType", itemType);
		request.setAttribute("itemState", itemState);
		request.setAttribute("roleType", roleType);
		
		request.setAttribute("itemList", itemList);
		request.getRequestDispatcher("/page/item/projects.jsp").forward(request, response);
	}
	
	/**
	 * 项目列表中，根据选择的项目状态获取该项目列表
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getItemListBystate(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String itemstate = request.getParameter("itemstate");
		System.out.println(itemstate);
		ItemService is = new ItemServiceImpl();
		List<Item> itemList = is.getItemByState(Integer.valueOf(itemstate));
		RoleTypeService rts = new RoleTypeServiceImpl();
		
		List<ItemType> itemType = is.getItemTypes();
		List<ItemState> itemState = is.getItemStates();
		List<RoleType> roleType = rts.getRoleTypes();

		request.setAttribute("itemType", itemType);
		request.setAttribute("itemState", itemState);
		request.setAttribute("roleType", roleType);
		
		request.setAttribute("itemList", itemList);
		request.getRequestDispatcher("/page/item/projects.jsp").forward(request, response);
	}
	
	/**
	 * 项目列表中，根据选择的项目角色获取该项目列表
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getItemListByrole(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String itemrole = request.getParameter("itemrole");
		System.out.println(itemrole);
		ItemService is = new ItemServiceImpl();
		List<Item> itemList = is.getItemByRoleId(Integer.valueOf(itemrole));
		System.out.println("获取到的role:"+itemList);
		RoleTypeService rts = new RoleTypeServiceImpl();
		
		List<ItemType> itemType = is.getItemTypes();
		List<ItemState> itemState = is.getItemStates();
		List<RoleType> roleType = rts.getRoleTypes();

		request.setAttribute("itemType", itemType);
		request.setAttribute("itemState", itemState);
		request.setAttribute("roleType", roleType);
		
		request.setAttribute("itemList", itemList);
		request.getRequestDispatcher("/page/item/projects.jsp").forward(request, response);
	}
	
	/**
	 * 项目列表中，根据输入的项目名称获取该项目列表
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getItemListByname(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String itemname = request.getParameter("itemname");
		System.out.println(itemname);
		// 解决json响应乱码
		response.setContentType("application/json;charset=utf-8");
		
		ItemService is = new ItemServiceImpl();
		//方法换了，参数itemname,返回传参一样
		List<Item> itemList = is.getItemByName(itemname);
		RoleTypeService rts = new RoleTypeServiceImpl();
		
		List<ItemType> itemType = is.getItemTypes();
		List<ItemState> itemState = is.getItemStates();
		List<RoleType> roleType = rts.getRoleTypes();

		request.setAttribute("itemType", itemType);
		request.setAttribute("itemState", itemState);
		request.setAttribute("roleType", roleType);
		System.out.println(itemList);
		
		request.setAttribute("itemList", itemList);
		request.getRequestDispatcher("/page/item/projects.jsp").forward(request, response);
		
		
	}
	
	/**
	 * 项目列表中，根据项目状态获取我的项目列表
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getMyitemBystate(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		User user = (User) request.getSession().getAttribute("loginUser");
		int userid = user.getId();
		int stateid =Integer.valueOf(request.getParameter("stateid"));
		
		ItemService is = new ItemServiceImpl();
		List<Item> myItems = is.getMyitemBystate(userid, stateid);
		if(myItems!=null) {
		request.setAttribute("myItems", myItems);
		
		request.setAttribute("stateId", stateid);
		//根据userid 和 stateid查询用户的项目列表 并返回，渲染
		request.getRequestDispatcher("/page/myitem/myIssueProjects.jsp").forward(request, response);
		}
		
		
	}
	
	/**
	 * 我发布的项目中，点击项目获取项目详情 以及报名者
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void getitemAnddevelopers(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		int itemid = Integer.valueOf(request.getParameter("itemId"));
		//根据itemid获取项目，和申请的开发者信息
		ItemService is = new ItemServiceImpl();
		ApplyService as = new ApplyServiceImpl();
		
		//通过itemid获取项目信息
		Item item = is.selectItemByItemId(itemid);
		
		//通过itemid获取开发者详情
		List<Apply> applys = as.getApplysByItemId(itemid);
		for(Apply a:applys) {
			long applyTime = a.getCreateTime().getTime();
			long nowTime = System.currentTimeMillis();
			long diff = nowTime - applyTime;
			 if(Math.floor(diff / (24 * 60 * 60 * 1000))>0 ) {
				 a.setDifftime((int)(Math.floor(diff / (24 * 60 * 60 * 1000)))+"天");
			 }else if(Math.floor(diff / (60 * 60 * 1000))>0) {
				 a.setDifftime((int)(Math.floor(diff / (60 * 60 * 1000)))+"小时");
			 }else if(Math.floor(diff / (60 * 1000))>0) {
				 a.setDifftime((int)(Math.floor(diff / (60 * 1000)))+"分钟");
			 }else {
				 a.setDifftime((int)(Math.floor(diff / (1000)))+"秒");
			 }
		}
		
		request.setAttribute("item", item);
		
		request.setAttribute("applys", applys);
		
		request.getRequestDispatcher("/page/myitem/projectStatus.jsp").forward(request, response);
	}
	
}
